/*
 * CacheModeler_SingleVersionView.java
 */

package cachemodeler_multyprocessor;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.awt.Font;
import java.util.Calendar;

/**
 * The application's main frame.
 */
public class CacheModeler_MultyprocessorVersionView extends FrameView 
{
    Multyprocessor mproc;
    
    public CacheModeler_MultyprocessorVersionView(SingleFrameApplication app) {
        super(app);

        initComponents();

        LogTextArea.setFont(new Font(null, Font.BOLD, 12));
        ResultTextArea.setFont(new Font(null, Font.BOLD, 12));
        
        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        SystemParametersPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CacheAssocComboBox = new javax.swing.JComboBox();
        CacheBlockSizeComboBox = new javax.swing.JComboBox();
        CacheSizeComboBox = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        ProcessorsCountComboBox = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        CoherenceProtocolsComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        RAMCycleTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        PointerSearchTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        BufferTimeTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        BusRateTextField = new javax.swing.JTextField();
        ModelingParametersPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        QuerySlider = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        QueryLabel = new javax.swing.JLabel();
        SharedSlider = new javax.swing.JSlider();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        ReadLabel = new javax.swing.JLabel();
        AddressSigmaTextField = new javax.swing.JTextField();
        ModelingDurationTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ReadSlider = new javax.swing.JSlider();
        jLabel23 = new javax.swing.JLabel();
        SharedProbLabel = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ShBlockCountComboBox = new javax.swing.JComboBox();
        LogPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogTextArea = new javax.swing.JTextArea();
        jLabel17 = new javax.swing.JLabel();
        StartModelingButton = new javax.swing.JButton();
        StopModelingButton = new javax.swing.JButton();
        ResultPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        jLabel20 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cachemodeler_multyprocessor.CacheModeler_MultyprocessorVersionApp.class).getContext().getResourceMap(CacheModeler_MultyprocessorVersionView.class);
        mainPanel.setBackground(resourceMap.getColor("mainPanel.background")); // NOI18N
        mainPanel.setName("mainPanel"); // NOI18N

        SystemParametersPanel.setBackground(resourceMap.getColor("SystemParametersPanel.background")); // NOI18N
        SystemParametersPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("SystemParametersPanel.border.highlightColor"), resourceMap.getColor("SystemParametersPanel.border.shadowColor"))); // NOI18N
        SystemParametersPanel.setName("SystemParametersPanel"); // NOI18N
        SystemParametersPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        SystemParametersPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 13, -1, -1));

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setToolTipText(resourceMap.getString("jLabel4.toolTipText")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N
        SystemParametersPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setToolTipText(resourceMap.getString("jLabel5.toolTipText")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N
        SystemParametersPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setToolTipText(resourceMap.getString("jLabel7.toolTipText")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        SystemParametersPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        CacheAssocComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Прямое отображение", "2 входа", "4 входа", "8 входов", "16 входов" }));
        CacheAssocComboBox.setSelectedIndex(2);
        CacheAssocComboBox.setToolTipText(resourceMap.getString("CacheAssocComboBox.toolTipText")); // NOI18N
        CacheAssocComboBox.setName("CacheAssocComboBox"); // NOI18N
        SystemParametersPanel.add(CacheAssocComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 120, -1));

        CacheBlockSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "32", "64", "128" }));
        CacheBlockSizeComboBox.setSelectedIndex(1);
        CacheBlockSizeComboBox.setToolTipText(resourceMap.getString("CacheBlockSizeComboBox.toolTipText")); // NOI18N
        CacheBlockSizeComboBox.setName("CacheBlockSizeComboBox"); // NOI18N
        SystemParametersPanel.add(CacheBlockSizeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 96, -1));

        CacheSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "32Kb", "64Kb", "128Kb", "256Kb", "512Kb", "1Mb", "2Mb" }));
        CacheSizeComboBox.setSelectedIndex(1);
        CacheSizeComboBox.setToolTipText(resourceMap.getString("CacheSizeComboBox.toolTipText")); // NOI18N
        CacheSizeComboBox.setName("CacheSizeComboBox"); // NOI18N
        SystemParametersPanel.add(CacheSizeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 96, -1));

        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N
        SystemParametersPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 48, -1, -1));

        ProcessorsCountComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" }));
        ProcessorsCountComboBox.setName("ProcessorsCountComboBox"); // NOI18N
        SystemParametersPanel.add(ProcessorsCountComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(171, 45, 96, -1));

        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N
        SystemParametersPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        CoherenceProtocolsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wright through", "Write once", "MSI", "MESI" }));
        CoherenceProtocolsComboBox.setSelectedIndex(1);
        CoherenceProtocolsComboBox.setName("CoherenceProtocolsComboBox"); // NOI18N
        SystemParametersPanel.add(CoherenceProtocolsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 160, 120, -1));

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N
        SystemParametersPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, -1, -1));

        RAMCycleTextField.setText(resourceMap.getString("RAMCycleTextField.text")); // NOI18N
        RAMCycleTextField.setToolTipText(resourceMap.getString("RAMCycleTextField.toolTipText")); // NOI18N
        RAMCycleTextField.setName("RAMCycleTextField"); // NOI18N
        SystemParametersPanel.add(RAMCycleTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 90, -1));

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N
        SystemParametersPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, -1, -1));

        PointerSearchTextField.setText(resourceMap.getString("PointerSearchTextField.text")); // NOI18N
        PointerSearchTextField.setToolTipText(resourceMap.getString("PointerSearchTextField.toolTipText")); // NOI18N
        PointerSearchTextField.setName("PointerSearchTextField"); // NOI18N
        SystemParametersPanel.add(PointerSearchTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 90, -1));

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N
        SystemParametersPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        BufferTimeTextField.setText(resourceMap.getString("BufferTimeTextField.text")); // NOI18N
        BufferTimeTextField.setToolTipText(resourceMap.getString("BufferTimeTextField.toolTipText")); // NOI18N
        BufferTimeTextField.setName("BufferTimeTextField"); // NOI18N
        SystemParametersPanel.add(BufferTimeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, 90, -1));

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N
        SystemParametersPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, -1, -1));

        BusRateTextField.setText(resourceMap.getString("BusRateTextField.text")); // NOI18N
        BusRateTextField.setName("BusRateTextField"); // NOI18N
        SystemParametersPanel.add(BusRateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 380, 90, -1));

        ModelingParametersPanel.setBackground(resourceMap.getColor("ModelingParametersPanel.background")); // NOI18N
        ModelingParametersPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(resourceMap.getColor("ModelingParametersPanel.border.highlightColor"), resourceMap.getColor("ModelingParametersPanel.border.shadowColor"))); // NOI18N
        ModelingParametersPanel.setForeground(resourceMap.getColor("ModelingParametersPanel.foreground")); // NOI18N
        ModelingParametersPanel.setName("ModelingParametersPanel"); // NOI18N
        ModelingParametersPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        ModelingParametersPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, -1, -1));

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N
        ModelingParametersPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N
        ModelingParametersPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N
        ModelingParametersPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N
        ModelingParametersPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        QuerySlider.setBackground(resourceMap.getColor("QuerySlider.background")); // NOI18N
        QuerySlider.setForeground(resourceMap.getColor("QuerySlider.foreground")); // NOI18N
        QuerySlider.setMajorTickSpacing(20);
        QuerySlider.setPaintTicks(true);
        QuerySlider.setToolTipText(resourceMap.getString("QuerySlider.toolTipText")); // NOI18N
        QuerySlider.setValue(40);
        QuerySlider.setName("QuerySlider"); // NOI18N
        QuerySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                QuerySliderStateChanged(evt);
            }
        });
        QuerySlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                QueryProbChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        ModelingParametersPanel.add(QuerySlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 60, 137, 30));

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N
        ModelingParametersPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 20, -1));

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N
        ModelingParametersPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 40, -1, -1));

        QueryLabel.setText(resourceMap.getString("QueryLabel.text")); // NOI18N
        QueryLabel.setName("QueryLabel"); // NOI18N
        ModelingParametersPanel.add(QueryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, -1, -1));

        SharedSlider.setBackground(resourceMap.getColor("SharedSlider.background")); // NOI18N
        SharedSlider.setForeground(resourceMap.getColor("SharedSlider.foreground")); // NOI18N
        SharedSlider.setMajorTickSpacing(5);
        SharedSlider.setMaximum(50);
        SharedSlider.setPaintTicks(true);
        SharedSlider.setToolTipText(resourceMap.getString("SharedSlider.toolTipText")); // NOI18N
        SharedSlider.setValue(10);
        SharedSlider.setName("SharedSlider"); // NOI18N
        SharedSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                SharedProbStateChanged(evt);
            }
        });
        ModelingParametersPanel.add(SharedSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, 137, 30));

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N
        ModelingParametersPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N
        ModelingParametersPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 20, -1));

        ReadLabel.setText(resourceMap.getString("ReadLabel.text")); // NOI18N
        ReadLabel.setName("ReadLabel"); // NOI18N
        ModelingParametersPanel.add(ReadLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        AddressSigmaTextField.setText(resourceMap.getString("AddressSigmaTextField.text")); // NOI18N
        AddressSigmaTextField.setToolTipText(resourceMap.getString("AddressSigmaTextField.toolTipText")); // NOI18N
        AddressSigmaTextField.setName("AddressSigmaTextField"); // NOI18N
        ModelingParametersPanel.add(AddressSigmaTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 320, 80, -1));

        ModelingDurationTextField.setText(resourceMap.getString("ModelingDurationTextField.text")); // NOI18N
        ModelingDurationTextField.setToolTipText(resourceMap.getString("ModelingDurationTextField.toolTipText")); // NOI18N
        ModelingDurationTextField.setName("ModelingDurationTextField"); // NOI18N
        ModelingParametersPanel.add(ModelingDurationTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 370, 80, -1));

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        ModelingParametersPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        ReadSlider.setBackground(resourceMap.getColor("ReadSlider.background")); // NOI18N
        ReadSlider.setForeground(resourceMap.getColor("ReadSlider.foreground")); // NOI18N
        ReadSlider.setMajorTickSpacing(20);
        ReadSlider.setPaintTicks(true);
        ReadSlider.setToolTipText(resourceMap.getString("ReadSlider.toolTipText")); // NOI18N
        ReadSlider.setValue(80);
        ReadSlider.setName("ReadSlider"); // NOI18N
        ReadSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ReadProbStateChanged(evt);
            }
        });
        ModelingParametersPanel.add(ReadSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 137, 30));

        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N
        ModelingParametersPanel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, -1, -1));

        SharedProbLabel.setText(resourceMap.getString("SharedProbLabel.text")); // NOI18N
        SharedProbLabel.setName("SharedProbLabel"); // NOI18N
        ModelingParametersPanel.add(SharedProbLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 180, -1, -1));

        jLabel25.setText(resourceMap.getString("jLabel25.text")); // NOI18N
        jLabel25.setName("jLabel25"); // NOI18N
        ModelingParametersPanel.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, -1, -1));

        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N
        ModelingParametersPanel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        ShBlockCountComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "16", "32", "64", "128", "256", "512", "1024" }));
        ShBlockCountComboBox.setSelectedIndex(1);
        ShBlockCountComboBox.setName("ShBlockCountComboBox"); // NOI18N
        ModelingParametersPanel.add(ShBlockCountComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 260, 80, -1));

        LogPanel.setBackground(resourceMap.getColor("LogPanel.background")); // NOI18N
        LogPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, resourceMap.getColor("LogPanel.border.matteColor"))); // NOI18N
        LogPanel.setName("LogPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        LogTextArea.setColumns(20);
        LogTextArea.setEditable(false);
        LogTextArea.setRows(5);
        LogTextArea.setName("LogTextArea"); // NOI18N
        jScrollPane1.setViewportView(LogTextArea);

        jLabel17.setFont(resourceMap.getFont("jLabel17.font")); // NOI18N
        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        javax.swing.GroupLayout LogPanelLayout = new javax.swing.GroupLayout(LogPanel);
        LogPanel.setLayout(LogPanelLayout);
        LogPanelLayout.setHorizontalGroup(
            LogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addContainerGap(100, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
        );
        LogPanelLayout.setVerticalGroup(
            LogPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LogPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))
        );

        StartModelingButton.setFont(resourceMap.getFont("StartModelingButton.font")); // NOI18N
        StartModelingButton.setText(resourceMap.getString("StartModelingButton.text")); // NOI18N
        StartModelingButton.setName("StartModelingButton"); // NOI18N
        StartModelingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartModelingButtonActionPerformed(evt);
            }
        });

        StopModelingButton.setFont(resourceMap.getFont("StopModelingButton.font")); // NOI18N
        StopModelingButton.setText(resourceMap.getString("StopModelingButton.text")); // NOI18N
        StopModelingButton.setName("StopModelingButton"); // NOI18N
        StopModelingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopModelingButtonActionPerformed(evt);
            }
        });

        ResultPanel.setBackground(resourceMap.getColor("ResultPanel.background")); // NOI18N
        ResultPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, resourceMap.getColor("ResultPanel.border.matteColor"))); // NOI18N
        ResultPanel.setName("ResultPanel"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        ResultTextArea.setColumns(20);
        ResultTextArea.setEditable(false);
        ResultTextArea.setRows(5);
        ResultTextArea.setName("ResultTextArea"); // NOI18N
        jScrollPane2.setViewportView(ResultTextArea);

        jLabel20.setFont(resourceMap.getFont("jLabel20.font")); // NOI18N
        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        javax.swing.GroupLayout ResultPanelLayout = new javax.swing.GroupLayout(ResultPanel);
        ResultPanel.setLayout(ResultPanelLayout);
        ResultPanelLayout.setHorizontalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addContainerGap(149, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );
        ResultPanelLayout.setVerticalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultPanelLayout.createSequentialGroup()
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(SystemParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ModelingParametersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(LogPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ResultPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(StopModelingButton)
                            .addComponent(StartModelingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ModelingParametersPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SystemParametersPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(StartModelingButton)
                        .addGap(3, 3, 3)
                        .addComponent(ResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StopModelingButton))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(LogPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        menuBar.setBackground(resourceMap.getColor("menuBar.background")); // NOI18N
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setBackground(resourceMap.getColor("fileMenu.background")); // NOI18N
        fileMenu.setLabel(resourceMap.getString("fileMenu.label")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cachemodeler_multyprocessor.CacheModeler_MultyprocessorVersionApp.class).getContext().getActionMap(CacheModeler_MultyprocessorVersionView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("exitMenuItem.text")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        statusPanel.setBackground(resourceMap.getColor("statusPanel.background")); // NOI18N
        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 535, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void QueryProbChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_QueryProbChanged
        // TODO add your handling code here:       
    }//GEN-LAST:event_QueryProbChanged

    private void QuerySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_QuerySliderStateChanged
        // TODO add your handling code here:     
        QueryLabel.setText(QuerySlider.getValue() + "%");
    }//GEN-LAST:event_QuerySliderStateChanged

    private void StartModelingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartModelingButtonActionPerformed
        //////////////////////////////////////////////////////////////////////
        try
        {
            if (mproc.modelingRun)
            {
                mproc.stop();                                  
            }            
        }
        catch (Exception ex) {}   
        //собираем параметры системы 
        LogTextArea.setText("");
        ResultTextArea.setText("");
        int RAMSize = 1073741824;
        int cacheSize = 65536;
        int cacheBlockSize = 64;        
        CoherenceProtocols cohProt = CoherenceProtocols.WRITE_ONCE;
        int cacheAssoc = 1;
        int procCount = 2;     
        
        switch(this.CacheSizeComboBox.getSelectedIndex())
        {
            case 0:
                cacheSize = 32768;
                break;
            case 1:
                cacheSize = 65536;
                break;
            case 2:
                cacheSize = 131072;
                break;
            case 3:
                cacheSize = 262144;
                break;
            case 4:
                cacheSize = 524288;
                break;
            case 5:
                cacheSize = 1048576;
                break;
            case 7:
                cacheSize = 2097152;
                break;
            case 8:
                cacheSize = 4194304;
                break;
            default:
                cacheSize = 65536;            
        }
        
        switch (this.CacheBlockSizeComboBox.getSelectedIndex())
        {
            case 0:
                cacheBlockSize = 32;
                break;
            case 1:
                cacheBlockSize = 64;
                break;
            case 2:
                cacheBlockSize = 128;
                break;            
            default:
                cacheBlockSize = 64;              
        }
        
        switch (this.CoherenceProtocolsComboBox.getSelectedIndex())
        {
            case 0:
                cohProt = CoherenceProtocols.BROADCAST;
                break;
            case 1:
                cohProt = CoherenceProtocols.WRITE_ONCE;
                break;
            case 2:
                cohProt = CoherenceProtocols.MSI;
                break;
            case 3:
                cohProt = CoherenceProtocols.MESI;
                break;            
        }
        
        switch (this.CacheAssocComboBox.getSelectedIndex())
        {
            case 0:
                cacheAssoc = 1;
                break;
            case 1:
                cacheAssoc = 2;
                break;
            case 2:
                cacheAssoc = 4;
                break;
            case 3:
                cacheAssoc = 8;
                break;
            case 4:
                cacheAssoc = 16;
                break;
            default:
                cacheAssoc = 4;
        }     
        
        //собираем параметры моделирования
        double queryProb = 0.4;
        double readProb = 0.8;
        double sharedProb = 0.1;
        int ShBlocksCount = 32;
        int memTime = 10;
        int pointTime = 1;
        int bufTime = 2;
        int sigma = 64;
        int busDelay = 4;
        int Time = 10000;     
        
        switch (this.ShBlockCountComboBox.getSelectedIndex())
        {
            case 0:
                ShBlocksCount = 16;
                break;
            case 1:
                ShBlocksCount = 32;
                break;
            case 2:
                ShBlocksCount = 64;
                break;
            case 3:
                ShBlocksCount = 128;
                break;
            case 4:
                ShBlocksCount = 256;
                break;
            case 5:
                ShBlocksCount = 512;
                break;
            case 6:
                ShBlocksCount = 1024;
                break;
            default:
                ShBlocksCount = 32;          
        }
        
        boolean allOk = true;           
        
        try 
        {         
            procCount = Integer.parseInt(this.ProcessorsCountComboBox.getSelectedItem().toString());
            queryProb = (double)this.QuerySlider.getValue() / 100;
            readProb = (double)this.ReadSlider.getValue() / 100;
            sharedProb = (double)this.SharedSlider.getValue() / 100;
            memTime = Integer.parseInt(this.RAMCycleTextField.getText());   
            pointTime = Integer.parseInt(this.PointerSearchTextField.getText());
            bufTime = Integer.parseInt(this.BufferTimeTextField.getText());
            busDelay = Integer.parseInt(this.BusRateTextField.getText());
            sigma = Integer.parseInt(this.AddressSigmaTextField.getText());
            Time = Integer.parseInt(this.ModelingDurationTextField.getText()); 
                    
            if (memTime<0 || pointTime<0 || bufTime<0 || sigma<0 || Time<0 || busDelay<0)
            {
                allOk = false;
                JOptionPane.showMessageDialog(null, "Один из параметров имеет недопустимое значение!\nПовторите ввод.");                
            }    
        }
        catch(Exception ex)
        {
            allOk = false;
            JOptionPane.showMessageDialog(null, "Один из параметров имеет недопустимое значение!"
                    + "\nПовторите ввод.");                               
        }
        if (allOk)
        {
            //create structures and start modeling
            SystemParameters sp;
            ModelingParameters mp;            
            sp = new SystemParameters(procCount, RAMSize, cacheSize,
                    1, cacheBlockSize, cacheAssoc, cohProt);
            mp = new ModelingParameters(Time, sigma,
                    queryProb, readProb,
                    memTime, pointTime, bufTime, busDelay,
                    sharedProb, ShBlocksCount);  
            LogTextArea.append("Моделирование начато: " + java.util.Calendar.getInstance().getTime() + "\n");
            mproc = new Multyprocessor(sp, mp, LogTextArea, ResultTextArea);
            mproc.startModeling();            
        }                
    }//GEN-LAST:event_StartModelingButtonActionPerformed

    private void StopModelingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopModelingButtonActionPerformed
        try
        {
            mproc.stop();
            mproc.modelingRun = false;
        }
        catch (Exception ex) {}
        this.LogTextArea.setText("");
    }//GEN-LAST:event_StopModelingButtonActionPerformed

    private void ReadProbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ReadProbStateChanged
        // TODO add your handling code here:
        this.ReadLabel.setText(this.ReadSlider.getValue() + "%");
    }//GEN-LAST:event_ReadProbStateChanged

    private void SharedProbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_SharedProbStateChanged
        // TODO add your handling code here:
        this.SharedProbLabel.setText(this.SharedSlider.getValue() + "%");
    }//GEN-LAST:event_SharedProbStateChanged

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressSigmaTextField;
    private javax.swing.JTextField BufferTimeTextField;
    private javax.swing.JTextField BusRateTextField;
    private javax.swing.JComboBox CacheAssocComboBox;
    private javax.swing.JComboBox CacheBlockSizeComboBox;
    private javax.swing.JComboBox CacheSizeComboBox;
    private javax.swing.JComboBox CoherenceProtocolsComboBox;
    private javax.swing.JPanel LogPanel;
    private javax.swing.JTextArea LogTextArea;
    private javax.swing.JTextField ModelingDurationTextField;
    private javax.swing.JPanel ModelingParametersPanel;
    private javax.swing.JTextField PointerSearchTextField;
    private javax.swing.JComboBox ProcessorsCountComboBox;
    private javax.swing.JLabel QueryLabel;
    public javax.swing.JSlider QuerySlider;
    private javax.swing.JTextField RAMCycleTextField;
    private javax.swing.JLabel ReadLabel;
    public javax.swing.JSlider ReadSlider;
    private javax.swing.JPanel ResultPanel;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JComboBox ShBlockCountComboBox;
    private javax.swing.JLabel SharedProbLabel;
    public javax.swing.JSlider SharedSlider;
    private javax.swing.JButton StartModelingButton;
    private javax.swing.JButton StopModelingButton;
    private javax.swing.JPanel SystemParametersPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
}
